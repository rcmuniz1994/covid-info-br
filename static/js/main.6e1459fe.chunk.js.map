{"version":3,"sources":["ducks/covidInforBrSlice.js","ducks/covidInfoPerStateSlice.js","CovidCasesTable.js","GeneralInfoCards.js","CovidInfoBrProgressbar.js","ducks/filteringStateSlice.js","CovidForm.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["covidInfoBrSlice","createSlice","name","initialState","isLoading","isError","values","reducers","setLoading","state","setError","setCovidInfoBr","action","payload","actions","covidInfoPerStateSlice","items","setCovidInfoPerState","CovidCasesTable","props","dispatch","useDispatch","useSelector","covidInfoPerState","stateName","fiteringState","React","useEffect","fetch","then","response","json","covidDataPerState","retrievedCovidInfoPerState","data","catch","filteredInfo","filter","s","toLowerCase","includes","console","log","Alert","variant","Table","striped","bordered","hover","map","stateInfo","key","uid","cases","deaths","GeneralInfoCards","covidInfoBr","Row","Col","Card","Body","Title","Text","moment","updated_at","locale","format","confirmed","id","recovered","CovidInfoBrProgressbar","recoveredPercentage","Math","round","deathPercentage","activePercentage","ProgressBar","className","animated","now","label","filteringStateSlice","setStateName","CovidForm","Form","Group","controlId","Label","Control","type","onChange","event","target","value","placeholder","App","covidDataBr","retrievedCovidInfoBr","Container","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e1459fe.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const covidInfoBrSlice = createSlice({\n  name: \"covidInfoBr\",\n  initialState: {\n    isLoading: false,\n    isError: false,\n    values: {},\n  },\n  reducers: {\n    setLoading: (state) => {\n      state.isLoading = true;\n      state.isError = false;\n    },\n    setError: (state) => {\n      state.isLoading = false;\n      state.isError = true;\n    },\n    setCovidInfoBr: (state, action) => {\n      state.values = action.payload;\n      state.isLoading = false;\n      state.isError = false;\n    },\n  },\n});\n\nconst { setCovidInfoBr, setLoading, setError } = covidInfoBrSlice.actions;\n\nexport const retrievedCovidInfoBr = () => (dispatch) => {\n  dispatch(setLoading());\n  fetch(\"https://covid19-brazil-api.now.sh/api/report/v1/brazil\")\n    .then((response) => response.json())\n    .then((covidDataBr) => {\n      const retrievedCovidInfoBr = covidDataBr.data;\n      dispatch(setCovidInfoBr(retrievedCovidInfoBr));\n    })\n    .catch(() => dispatch(setError()));\n};\n\nexport default covidInfoBrSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const covidInfoPerStateSlice = createSlice({\n  name: \"covidInfoPerState\",\n  initialState: {\n    isLoading: false,\n    isError: false,\n    items: [],\n  },\n  reducers: {\n    setLoading: (state) => {\n      state.isLoading = true;\n      state.isError = false;\n    },\n    setError: (state) => {\n      state.isLoading = false;\n      state.isError = true;\n    },\n    setCovidInfoPerState: (state, action) => {\n      state.items = action.payload;\n      state.isLoading = false;\n      state.isError = false;\n    },\n  },\n});\n\nconst {\n  setCovidInfoPerState,\n  setLoading,\n  setError,\n} = covidInfoPerStateSlice.actions;\n\nexport const retrievedCovidInfoPerState = () => (dispatch) => {\n  dispatch(setLoading());\n  fetch(\"https://covid19-brazil-api.now.sh/api/report/v1\")\n    .then((response) => response.json())\n    .then((covidDataPerState) => {\n      const retrievedCovidInfoPerState = covidDataPerState.data;\n      dispatch(setCovidInfoPerState(retrievedCovidInfoPerState));\n    })\n    .catch(() => dispatch(setError()));\n};\n\nexport default covidInfoPerStateSlice.reducer;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { retrievedCovidInfoPerState } from \"./ducks/covidInfoPerStateSlice\";\n\nconst CovidCasesTable = ({ props }) => {\n  const dispatch = useDispatch();\n  const { isLoading, isError, items: covidInfoPerState } = useSelector(\n    (state) => state.covidInfoPerState\n  );\n\n  const stateName = useSelector((state) => state.fiteringState.stateName);\n\n  React.useEffect(() => {\n    dispatch(retrievedCovidInfoPerState());\n  }, [dispatch]);\n\n  const filteredInfo = covidInfoPerState.filter((s) =>\n    s.state.toLowerCase().includes(stateName.toLowerCase())\n  );\n\n  if (isLoading) {\n    console.log(\"is loading: \", isLoading);\n    return <Alert variant=\"secondary\">Carregando...</Alert>;\n  }\n\n  if (isError) {\n    console.log(\"is error: \", isError);\n    return <Alert variant=\"danger\">Errou ao carregar os dados!</Alert>;\n  }\n\n  return (\n    <Table striped bordered hover variant=\"dark\">\n      <thead>\n        <tr>\n          <th>Estado</th>\n          <th>Casos confirmados</th>\n          <th>Óbitos</th>\n        </tr>\n      </thead>\n      <tbody>\n        {filteredInfo.map((stateInfo) => (\n          <tr key={stateInfo.uid}>\n            <td>{stateInfo.state}</td>\n            <td>{stateInfo.cases}</td>\n            <td>{stateInfo.deaths}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default CovidCasesTable;\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Alert from \"react-bootstrap/Alert\";\nimport moment from \"moment\";\nimport \"moment/locale/pt-br\";\n\nconst GeneralInfoCards = ({ covidInfoBr, isLoading, isError, ...props }) => {\n  if (isError) {\n    return (\n      <Alert variant=\"danger\">Erro ao carregar os dados gerais do Brasil</Alert>\n    );\n  }\n\n  return (\n    <Row>\n      <Col>\n        <Card>\n          <Card.Body>\n            <Card.Title>\n              <strong>Atualizado em:</strong>\n            </Card.Title>\n            <Card.Text>\n              {(isLoading && \"Carregando...\") ||\n                (covidInfoBr &&\n                  `${moment(covidInfoBr.updated_at)\n                    .locale(\"pt-br\")\n                    .format(\"L\")} - ${moment(covidInfoBr.updated_at)\n                    .locale(\"pt-br\")\n                    .format(\"LT\")}`)}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </Col>\n      <Col>\n        <Card>\n          <Card.Body>\n            <Card.Title>\n              <strong>Confirmados:</strong>\n            </Card.Title>\n            <Card.Text>\n              {(isLoading && \"Carregando...\") ||\n                (covidInfoBr && `${covidInfoBr.confirmed}`)}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </Col>\n      <Col>\n        <Card>\n          <Card.Body id=\"covid-cards-cases\">\n            <Card.Title>\n              <strong>Ativos:</strong>\n            </Card.Title>\n            <Card.Text>\n              {(isLoading && \"Carregando...\") ||\n                (covidInfoBr && `${covidInfoBr.cases}`)}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </Col>\n      <Col>\n        <Card>\n          <Card.Body id=\"covid-cards-recovered\">\n            <Card.Title>\n              <strong>Recuperados:</strong>\n            </Card.Title>\n            <Card.Text>\n              {(isLoading && \"Carregando...\") ||\n                (covidInfoBr && `${covidInfoBr.recovered}`)}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </Col>\n      <Col>\n        <Card>\n          <Card.Body id=\"covid-cards-deaths\">\n            <Card.Title>\n              <strong>Mortes:</strong>\n            </Card.Title>\n            <Card.Text>\n              {(isLoading && \"Carregando...\") ||\n                (covidInfoBr && `${covidInfoBr.deaths}`)}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default GeneralInfoCards;\n","import React from \"react\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport \"./App.css\";\n\nconst CovidInfoBrProgressbar = ({ covidInfoBr, isLoading, isError }) => {\n  const recoveredPercentage = Math.round(\n    (covidInfoBr.recovered / covidInfoBr.confirmed) * 100\n  );\n  const deathPercentage = Math.round(\n    (covidInfoBr.deaths / covidInfoBr.confirmed) * 100\n  );\n  const activePercentage = Math.round(\n    (covidInfoBr.cases / covidInfoBr.confirmed) * 100\n  );\n\n  if (isLoading) {\n    return (\n      <ProgressBar className=\"covid-progressbar\">\n        <ProgressBar\n          className=\"text-dark font-weight-bold\"\n          striped\n          animated\n          now={100}\n          label={\"Carregando...\"}\n        />\n      </ProgressBar>\n    );\n  }\n\n  if (isError) {\n    return (\n      <ProgressBar className=\"covid-progressbar\">\n        <ProgressBar\n          className=\"text-dark font-weight-bold\"\n          striped\n          animated\n          variant=\"danger\"\n          now={100}\n        />\n      </ProgressBar>\n    );\n  }\n\n  return (\n    <ProgressBar className=\"covid-progressbar\">\n      <ProgressBar\n        className=\"text-dark font-weight-bold\"\n        striped\n        variant=\"success\"\n        now={recoveredPercentage}\n        animated\n        label={`${recoveredPercentage}%`}\n        key={1}\n      />\n      <ProgressBar\n        className=\"text-dark font-weight-bold\"\n        striped\n        variant=\"warning\"\n        now={activePercentage}\n        animated\n        label={`${activePercentage}%`}\n        key={2}\n      />\n      <ProgressBar\n        className=\"text-dark font-weight-bold\"\n        striped\n        variant=\"danger\"\n        now={deathPercentage}\n        animated\n        label={`${deathPercentage}%`}\n        key={3}\n      />\n    </ProgressBar>\n  );\n};\n\nexport default CovidInfoBrProgressbar;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const filteringStateSlice = createSlice({\n  name: \"fiteringState\",\n  initialState: {\n    stateName: \"\",\n  },\n  reducers: {\n    setStateName: (state, action) => {\n      state.stateName = action.payload;\n    },\n  },\n});\n\nexport const { setStateName } = filteringStateSlice.actions;\n\nexport default filteringStateSlice.reducer;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Form from \"react-bootstrap/Form\";\nimport { setStateName } from \"./ducks/filteringStateSlice\";\n\nconst CovidForm = (props) => {\n  const dispatch = useDispatch();\n\n  const filteringStatePerName = (event) => {\n    dispatch(setStateName(event.target.value));\n  };\n\n  return (\n    <Form className=\"covid-form\">\n      <Form.Group controlId=\"covidCasesForm\">\n        <Form.Label>\n          <strong>Estado:</strong>\n        </Form.Label>\n        <Form.Control\n          type=\"text\"\n          onChange={filteringStatePerName}\n          placeholder=\"Digite o nome do estado de interesse\"\n        />\n      </Form.Group>\n    </Form>\n  );\n};\n\nexport default CovidForm;\n","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { retrievedCovidInfoBr } from \"./ducks/covidInforBrSlice\";\r\nimport CovidCasesTable from \"./CovidCasesTable\";\r\nimport GeneralInfoCards from \"./GeneralInfoCards\";\r\nimport CovidInfoBrProgressbar from \"./CovidInfoBrProgressbar\";\r\nimport CovidForm from \"./CovidForm\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const { isLoading, isError, values: covidInfoBr } = useSelector(\r\n    (state) => state.covidInfoBr\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    dispatch(retrievedCovidInfoBr());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div id=\"panel-background\">\r\n      <Container>\r\n        <h1 id=\"title\">COVID-19: Brasil</h1>\r\n        <GeneralInfoCards\r\n          covidInfoBr={covidInfoBr}\r\n          isLoading={isLoading}\r\n          isError={isError}\r\n        />\r\n        <CovidInfoBrProgressbar\r\n          covidInfoBr={covidInfoBr}\r\n          isLoading={isLoading}\r\n          isError={isError}\r\n        />\r\n        <CovidForm />\r\n        <CovidCasesTable className=\"covid-table\" />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { covidInfoPerStateSlice } from \"../ducks/covidInfoPerStateSlice\";\r\nimport { covidInfoBrSlice } from \"../ducks/covidInforBrSlice\";\r\nimport { filteringStateSlice } from \"../ducks/filteringStateSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    covidInfoPerState: covidInfoPerStateSlice.reducer,\r\n    covidInfoBr: covidInfoBrSlice.reducer,\r\n    fiteringState: filteringStateSlice.reducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}